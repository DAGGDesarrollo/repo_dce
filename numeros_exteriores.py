# -*- coding: utf-8 -*-
"""
/***************************************************************************
Números Exteriores - INE
                                 A QGIS plugin
 Este Plugin otorga herramientas para el procesamiento, depuración y actualización 
 de los números exteriores pertenecientes a la cartografía electoral generada para 
 la Dirección de Cartografía Electoral del Instituto Nacional Electoral (INE).
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by INE, Direccion de Cartografia Electoral, 
                                Luis Enrique Cortés
        email                : enrique.cortes@ine.mx
        version              : 1.1.0
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings 
from qgis.PyQt.QtCore import QTranslator 
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtGui import QColor
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import *
from qgis.core import QgsProject
from qgis.core import QgsVectorLayer
from qgis.core import QgsDataSourceUri
from qgis.utils import *
from PyQt5 import QtTest
from PyQt5.QtWidgets import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .numeros_exteriores_dockwidget import numeros_exterioresDockWidget
import os
import os.path

#Importa módulo regex para expresiones regulares
import re

#Importa módulo para el archivo log
import logging

#Importa módulo para las fechas
from datetime import datetime

# load the adapter
import psycopg2
# load the psycopg extras module
import psycopg2.extras
from PyQt5.QtWidgets import QProgressDialog




class numeros_exteriores:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'numeros_exteriores_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Números Exteriores')
        self.toolbar = self.iface.addToolBar(u'Números Exteriores')
        self.toolbar.setObjectName(u'Números Exteriores')
        
        self.timeformat = '%Y-%m-%d %H:%M:%S'

        self.campo01 = ""
        self.conectado = False
        self.conectadoflag = 0
        self.ultimaEntidad = ""
        self.ultimoMunicipio = ""

        self.servidor = ''
        self.baseDatos = ''

        self.pluginIsActive = False
        self.dockwidget = None

        self.control = 0
        self.SectorNombre = ['', '', '']
        self.SectorRInicial = ['', '', '']
        self.SectorRFinal = ['', '', '']
        self.SectorRIntervalo = ['', '', '']
        self.flagSinIntervalo = [False,False,False]
        
        self.cadena_existente = ""
        self.controlCadenaUH = 0
        self.controlMostrar = 0
        self.controlCrearCadena = 0
        self.capas = ['Seccion', 'Manzana', 'Vialidad', 'NumerosExteriores']

        self.Sector1 = []
        self.Sector2 = []
        self.Sector3 = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('numeros_exteriores', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        #linea agregada al codigo original
        #Se instancia la clase del cuadro de dialogo
        self.dockwidget = numeros_exterioresDockWidget() 
 
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/numeros_exteriores/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Números Exteriores'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------
    #Sección para conectar el código con los botones de acción con la interfaz gráfica

        #Botones de Acceso
        self.dockwidget.btnConectar.clicked.connect(self.btnConectar_accion)
        self.dockwidget.btnDesconectar.clicked.connect(self.btnDesconectar_accion)
        self.dockwidget.btnRecomendaciones.clicked.connect(self.btnRecomendaciones_accion)

        #Botones de Sección
        self.dockwidget.cveMunicipio.currentIndexChanged.connect(self.on_cveMunicipio_changed)
        self.dockwidget.btnObtenerArea.clicked.connect(self.btnObtenerArea_accion)

        #Botones de Edición
        self.dockwidget.btnMostrar.clicked.connect(self.btnMostrar_accion)
        self.dockwidget.tmaxFont.clicked.connect(self.tmaxFont)
        self.dockwidget.tmedFont.clicked.connect(self.tmedFont)
        self.dockwidget.tminFont.clicked.connect(self.tminFont)

        #Botones de Validación
        self.dockwidget.btnIdentificar20.clicked.connect(self.btnIdentificar20_accion)
        self.dockwidget.btnIdentificar60.clicked.connect(self.btnIdentificar60_accion)
        self.dockwidget.btndistUsuario.clicked.connect(self.btndistUsuario_accion)
        self.dockwidget.btnSugerir.clicked.connect(self.btnSugerir_accion)        
        self.dockwidget.btnGuardar.clicked.connect(self.btnGuardar)
        
        #Botones de Cadena
        self.dockwidget.btnCrearCadena.clicked.connect(self.btnCrearCadena)
        self.dockwidget.btnInvertir.clicked.connect(self.btnInvertir)
        self.dockwidget.btnLimpiarIntervalo.clicked.connect(self.btnLimpiarIntervalo)
        self.dockwidget.btnAgregarLiteralesEspeciales.clicked.connect(
            self.btnAgregarLiteralesEspeciales
            )       

        #Botones de Cadena UH
        self.dockwidget.cveSector.currentIndexChanged.connect(self.cveSector_changed)
        self.dockwidget.btnEliminarSector.clicked.connect(self.btnEliminarSector_accion)
        self.dockwidget.btnAsignarSector.clicked.connect(self.btnAsignarSector_accion)
        self.dockwidget.btnCrearCadenaUH.clicked.connect(self.btnCrearCadenaUH_accion)

    #--------------------------------------------------------------------------
        
    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING NUMEROS_EXTERIORES"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD numeros_exteriores"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&numeros_exteriores'),
                action
                )
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        
        if not self.pluginIsActive:
            self.pluginIsActive = True

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = numeros_exterioresDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Muestra el Dockwidget del lado derecho cuando se abre
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            if self.dockwidget.cveEntidad.count() == 0:

                for entidad in range(1,33):
                    self.dockwidget.cveEntidad.addItem(str(entidad).zfill(2))

            #Utiliza una bandera para saber si ya se ha iniciado una instancia del Plugin
            #Si se ha iniciado sesión la bandera cambia a 1 y si se cierra la ventana del plugin 
            #se mantiene el botón desbloqueado
            if self.conectadoflag == 1:
                self.dockwidget.btnDesconectar.setEnabled(True)
            #Se mantiene el botón bloqueado hasta iniciar sesión
            else:
                self.dockwidget.btnDesconectar.setEnabled(False)            

            if self.dockwidget.cveSector.count() == 0:
                for sector in range(1,4):
                    item = str(sector)
                    self.dockwidget.cveSector.addItem(item)     

    #lineas agregadas al codigo original
    def btnConectar_accion(self):
        
        try:
            self.controlMostrar = 0
            #Se crea el logger y se configura según el usuario ingresado
            usr = self.dockwidget.txtUsuario.text()
            cveEnt = self.dockwidget.cveEntidad.currentText()
            logging.basicConfig(
                filename
                    =f'{os.path.dirname(
                            os.path.realpath(__file__)
                        )}/plugin_numext_{cveEnt}_{usr}.log', 
                filemode
                    ='a', level=logging.INFO
                )
            
            self.logger = logging.getLogger(
                f'{self.dockwidget.cveEntidad.currentText()}_{self.dockwidget.txtUsuario.text()}'
                )
            #Se crea el handler y el nivel de INFO
            ch = logging.StreamHandler()
            
            #Se crea el formato
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s',datefmt=self.timeformat
                )
            ch.setFormatter(formatter)
            self.logger.addHandler(ch)  
                     
            #Bandera que establece el valor cuando se conecta
            self.conectadoflag = 1
            #Esconde la contraseña al momento de establecerse la conexión, en caso de que el
            #usuario la haya dejado visible
            self.dockwidget.txtClave.setPasswordVisibility(False)
            if self.conectado == True:
                return
            
            usr = self.dockwidget.txtUsuario.text()
            pwd = self.dockwidget.txtClave.text()
            
            self.baseDatos = "bged" + self.dockwidget.cveEntidad.currentText()
            self.servidor = self.dockwidget.txtServidor.text()
            
            #Sección que valida que se hayan ingresado todos los datos para la conexión
            if usr is NULL or usr == "" or usr.isspace(): 
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    "No ingresó nombre de usuario, por favor, ingrese uno."
                    )
            if pwd is NULL or pwd == "" or pwd.isspace(): 
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    "No ingresó una contraseña, por favor, ingrese una."
                    )
            if self.servidor is NULL or self.servidor == "" or self.servidor.isspace(): 
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    "No ingresó una dirección IP, por favor, ingrese una."
                    )
            
            usr = self.dockwidget.txtUsuario.text()
            pwd = self.dockwidget.txtClave.text()
            
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection(self.servidor, "5432", self.baseDatos, usr, pwd)
            #Codigo para cargar registros de municipios
            #Abrir base
            usr = self.dockwidget.txtUsuario.text()
            pwd = self.dockwidget.txtClave.text()
            
            #localhost
            #remote Samge bged 
            conn = psycopg2.connect(database=self.baseDatos, 
                                    user=usr, 
                                    password=pwd, 
                                    host=self.servidor, 
                                    port="5432"
                                    )
        
            with conn:

                qry_c = "SELECT municipio, nombre from bged.municipio order by municipio asc;"
                with conn.cursor() as curs:
                    curs.execute(qry_c)
                    n = 1
                    rows = curs.fetchall() #one row
                    for row in rows:
                        idname = str(row[0]) + " : " + row[1].title()
                        self.dockwidget.cveMunicipio.addItem(idname)
                        n=n+1

                curs.close()

            conn.close()
            
            self.dockwidget.btnDesconectar.setEnabled(True)
            self.dockwidget.btnConectar.setEnabled(False)
            self.conectado = True

            self.dockwidget.txtServidor.setEnabled(False)
            self.dockwidget.cveEntidad.setEnabled(False)
            self.dockwidget.txtUsuario.setEnabled(False)
            self.dockwidget.txtClave.setEnabled(False)

            QMessageBox.information(
                self.iface.mainWindow(), 
                'Aviso', 
                (
                    f"Se realizó la conexión con éxito...\nIP: {self.servidor}\n"
                    f"Base de datos: {self.baseDatos}\nBienvenido {usr.split('.')[0].title()}"
                    )
                )
            self.logger.info(f'{datetime.now().strftime(self.timeformat)} Conexión exitosa')
            QMessageBox.information(
                self.iface.mainWindow(), 
                'Aviso importante', 
                (
                    f"Con la finalidad de mantener actualizada la cartografía de manera permanente,"
                    f" se deberá observar los lineamientos y normas vigentes en materia de"
                    f" digitalización para la incorporación de información cartográfica."
                    )
                )
        except psycopg2.Error as error:
            if psycopg2.errors.lookup("28P01"):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "Credenciales incorrectas, por favor, verifique."
                    )                    
            else:
                self.iface.messageBar().pushMessage(
                    "Mensaje", 
                    (
                        f"No se logró ingresar a la Base. Si el error persiste levante un caso CAU"
                        f" para recibir asistencia."
                    )
                    )
                QMessageBox.critical(
                    self.iface.mainWindow(), 
                    "¡Oops!",
                    (
                        f"Ocurrió un error al establecer la conexión.\n"
                        f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                    
                    )
                self.logger.error(
                    (
                        f"{datetime.now().strftime(self.timeformat)} "
                        f"Error al establecer la conexión: {error}"
                        )
                    )
                conn.close()
    def btnDesconectar_accion(self):

        try:
            #Pregunta al usuario si desea cerrar su sesión
            usuario = self.dockwidget.txtUsuario.text()
            buttonReply = QMessageBox.question(
                self.iface.mainWindow(), 
                'Atención', 
                "¿Confirma que desea cerrar su sesión?", 
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
                )
            
            #Si se cierra la sesión se limpian todos los cuadros de textos y se desbloquean 
            # nuevamente los cuadros de texto de la pestaña "Acceso"
            if buttonReply == QMessageBox.Yes:
                if self.conectado == True:

                    self.ultimaEntidad = self.dockwidget.cveEntidad.currentText()

                    self.dockwidget.txtServidor.setText("")
                    self.dockwidget.txtUsuario.setText("")
                    self.dockwidget.txtClave.setText("")

                    self.dockwidget.idVialidad_original.setText("")
                    self.dockwidget.idManzana_original.setText("")
                    self.dockwidget.idVialidad.clear()
                    self.dockwidget.idManzana.clear()

                    self.dockwidget.txtRinicial.setText("")
                    self.dockwidget.txtRfinal.setText("")
                    self.dockwidget.txtRIntervalo.setText("")
                    self.dockwidget.textEdit.setText("")

                    self.dockwidget.txtServidor.setEnabled(True)
                    self.dockwidget.cveEntidad.setEnabled(True)
                    self.dockwidget.txtUsuario.setEnabled(True)
                    self.dockwidget.txtClave.setEnabled(True)

                    self.dockwidget.cveMunicipio.clear()
                    self.dockwidget.cveSeccion.clear()

                    self.dockwidget.distUsuario.setText("")
                    self.dockwidget.checkLl.setChecked(False)
                    self.dockwidget.checkEnne.setChecked(False)
                    self.dockwidget.checkRr.setChecked(False)
                    self.dockwidget.checkSinIntervalo.setChecked(False)

                    self.dockwidget.btnDesconectar.setEnabled(False)
                    self.dockwidget.btnConectar.setEnabled(True)
                    self.dockwidget.checkFiltroCapas.setChecked(False)   

                    # Lista las capas
                    layers = list(QgsProject.instance().mapLayers().values())
                    vlayer_count = 0

                    for layer in layers:
                        if layer.type() == QgsMapLayer.VectorLayer:
                            vlayer_count = vlayer_count + 1
                        #Elimina sólo las capas que usa el Plugin
                        if layer.name() in self.capas:
                            QgsProject.instance().removeMapLayer(layer)
                    self.capas = ['Seccion', 'Manzana', 'Vialidad', 'NumerosExteriores']
                    self.conectado = False
                    usr_msg = usuario.split(".")[0].title() 
                    self.iface.mainWindow().show()
                    QMessageBox.information(
                        self.iface.mainWindow(),
                        'Información',f'Se ha cerrado la sesión. \nHasta pronto {usr_msg}.'
                        )
                    self.iface.messageBar().pushSuccess(
                        'Despedida', 
                        f' Hasta luego {usr_msg} que tengas buen día.'
                        )
                    self.logger.info(
                        (
                            f'{datetime.now().strftime(self.timeformat)}' 
                            f' Se cerró exitósamente la conexión'
                        )
                        )
                
                    #Se refresca el canvas para que se vea la eliminación de las capas
                    canvas = iface.mapCanvas()
                    canvas.refresh()
            else:
                self.iface.messageBar().pushMessage(
                    'Información', 
                    f' De acuerdo {usr_msg} la sesión continua.'
                    )

        except Exception as error:
            QMessageBox.critical
            (self.iface.mainWindow(),
              "¡Oops!",
              (
                f"Ocurrió un error al cerrar la conexión. \n"
                f"Motivo: \n{error}.\n Se escribe en el registro."
                )
              )
            self.logger.error(
                f'{datetime.now().strftime(self.timeformat)} Error al cerrar la conexión: {error}'
                )

    def on_cveMunicipio_changed(self, value):      
        
        self.dockwidget.cveSeccion.clear()   
       
        try:
            if self.dockwidget.cveMunicipio.count() == 0:
                return
    

            numeroMunicipio = str(self.dockwidget.cveMunicipio.currentText().split(" :",1)[0])
            
            usr = self.dockwidget.txtUsuario.text()
            pwd = self.dockwidget.txtClave.text()
            
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection(self.servidor, "5432", self.baseDatos, usr, pwd)
            
            conn = psycopg2.connect(database=self.baseDatos, 
                                    user=usr, 
                                    password=pwd, 
                                    host=self.servidor, 
                                    port="5432")
            with conn:

                qry_c = "SELECT municipio, seccion from bged.seccion where municipio = %s order by seccion asc;"
                data_c = (numeroMunicipio, )

                with conn.cursor() as curs:

                    curs.execute(qry_c, data_c)  
                    rows = curs.fetchall() #one row
                    for row in rows:

                        sec_num = str(row[1])
                        self.dockwidget.cveSeccion.addItem(sec_num)

                curs.close()    
            conn.close()
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al cambiar el municipio. \n" 
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                f'{datetime.now().strftime(self.timeformat)} Error al cambiar de municipio: {error}'
                )
            conn.close()


    def btnObtenerArea_accion(self):

        try:
            if self.conectado == 1:
                seccion = f'Seccion_{self.dockwidget.cveSeccion.currentText().zfill(4)}'
                self.capas.append(seccion)
                #Verifica que no se cargue la misma capa más de una vez
                if self.capas.count(seccion) > 1:
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        'Atención', 
                        "Ya se han cargado las capas asociadas a la sección seleccionada."
                        )
                    return
                #Manda mensaje sobre el modo de carga seleccionado
                if self.dockwidget.checkFiltroCapas.isChecked():
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        'Atención', 
                        (
                            f"Seleccionó la opción «Acotar Solo a la Sección», considere que en "
                            f"este modo de carga solo podrá editar y validar a nivel tabular."
                        )
                        )

                #Se configura la barra de progreso y se fija el valor inicial en 0 para comenzar 
                # el proceso
                prog = QProgressDialog('Cargando capas. Un momento, por favor.', '', 0, 100)
                prog.setWindowModality(Qt.WindowModal)
                prog.setCancelButton(None)
                time.sleep(1)
                #Borrar capas si hubo cambio de entidad
                municipioActual = str(self.dockwidget.cveMunicipio.currentText().split(" :",1)[0])
                if (self.dockwidget.cveEntidad.currentText() != self.ultimaEntidad  or 
                    self.ultimoMunicipio != municipioActual):
                    #borrar capas
                    # Get list of vector layers
                    layers = list(QgsProject.instance().mapLayers().values())
                    # Check there is at least one vector layer. Selecting within the same layer is fine.
                    for layer in layers:
                        if layer.type() == QgsMapLayer.VectorLayer:
                            if layer.name() in self.capas:
                                QgsProject.instance().removeMapLayer(layer)

                    self.ultimaEntidad = self.dockwidget.cveEntidad.currentText()
                    self.ultimoMunicipio = municipioActual

                # Get list of vector layers
                layers = list(QgsProject.instance().mapLayers().values())
                # Check there is at least one vector layer. Selecting within the same layer is fine.
                vlayer_count = 0
                for layer in layers:
                    if layer.type() == QgsMapLayer.VectorLayer:
                        vlayer_count = vlayer_count + 1
                    if layer.name() in self.capas:
                        QgsProject.instance().removeMapLayer(layer)

                vlayer_count = 0
                numeroSeccion = str(self.dockwidget.cveSeccion.currentText())
                numeroMunicipio = str(self.dockwidget.cveMunicipio.currentText().split(" :",1)[0])

                usr = self.dockwidget.txtUsuario.text()
                pwd = self.dockwidget.txtClave.text()
                
                uri = QgsDataSourceUri()
                # set host name, port, database name, username and password
                uri.setConnection(self.servidor, "5432", self.baseDatos, usr, pwd)
                # set database schema, table name, geometry column and optionally
                # subset (WHERE clause)

                #Capa auxiliar para reconocer la seccion a trabajar
                QtTest.QTest.qWait(100)
                #Consulta de seccion mediante seccion (una seccion para emular zoom en ella)
                uri.setDataSource("bged", "seccion", "geom", f'seccion={numeroSeccion}')
                vlayer1SEC = QgsVectorLayer(
                    uri.uri(False), f'Seccion_{numeroSeccion.zfill(4)}', "postgres"
                    )
                QgsProject.instance().addMapLayer(vlayer1SEC)

                QtTest.QTest.qWait(700)

                #funciona para el zoom
                iface.setActiveLayer(vlayer1SEC)
                iface.zoomToActiveLayer()

                #	232	56	69
                QtTest.QTest.qWait(200)

                vlayer1SEC.setOpacity(0.3)

                mySymbol1 = QgsFillSymbol.createSimple(
                    {
                        'color':'red',
                        'color_border':'red',
                        'width_border':'0.3', 
                        'style':'solid'
                        }
                    )
                myRenderer = vlayer1SEC.renderer()
                myRenderer.setSymbol(mySymbol1)

                #Muestra el 20% de avance
                prog.setValue(20)

                vlayer1SEC.triggerRepaint()
                QtTest.QTest.qWait(100)

                #se elimina capa de la unica seccion solo se agrego para emular zoom, ya no se 
                # elimina se usa como transparencia
                QtTest.QTest.qWait(200)

                #Estas capas se cargan una sola vez, Seccion, Manzana, Vialidad, Num Ext
                if vlayer_count == 0:

                    #Consulta de seccion mediante municipio/seccion
                    uri.setDataSource("bged", "seccion", "geom", "municipio=" + numeroMunicipio)
                    vlayerSEC = QgsVectorLayer(uri.uri(False), "Seccion", "postgres")
                    QgsProject.instance().addMapLayer(vlayerSEC)

                    #Se configura el formato de las etiquetas
                    SE_layer = QgsPalLayerSettings()
                    textFormat = QgsTextFormat()
                    textFormat.setColor(Qt.darkRed)
                    textFormat.setSize(15)
                    textFormat.buffer().setEnabled(True)
                    textFormat.buffer().setSize(0.7)
                    textFormat.buffer().setColor(QColor('#FFFFFF'))
                    SE_layer.setFormat(textFormat)
                    #Sección a cuatro digitos, del tipo 00001
                    SE_layer.fieldName = '\'Sección \n\' || lpad(to_string("seccion"),4,\'0\')' 
                    SE_layer.isExpression = True
                    SE_layer.enabled = True
                    SE_layer.placement = QgsPalLayerSettings.AroundPoint
                    SE_layer.fitInPolygonOnly = True
                    SElabels = QgsVectorLayerSimpleLabeling(SE_layer)
                    SElabels.drawLabels = True
                    vlayerSEC.setLabeling(SElabels)
                    vlayerSEC.setLabelsEnabled(True)
                    vlayerSEC.setCustomProperty("labeling/drawLabels",  "True") 
                    vlayerSEC.triggerRepaint()
                    QtTest.QTest.qWait(200)

                    mySymbol1 = QgsFillSymbol.createSimple(
                        {
                            'color':'red', 
                            'color_border':'red', 
                            'width_border':'0.4', 
                            'style':'no'
                            }
                        )
                    myRenderer = vlayerSEC.renderer()
                    myRenderer.setSymbol(mySymbol1)
                    vlayerSEC.triggerRepaint()
                    QtTest.QTest.qWait(1000)
                
                    #Muestra el 40% de avance
                    prog.setValue(40)
                    #Si el checkbox está marcado se cargan sólo las capas filtradas 
                    if self.dockwidget.checkFiltroCapas.isChecked():
                        query = (
                            f"SELECT m.geom as geom, m.id as id, m.entidad as entidad," 
                            f"m.distrito as distrito, m.municipio as municipio, m.seccion as seccion, "
                            f"m.localidad as localidad, m.manzana as manzana, m.status as status, "
                            f"m.disperso as disperso, m.caso_captura as caso_captura "
                            f"FROM bged.manzana as m, bged.seccion as s "
                            f"WHERE s.seccion = {numeroSeccion} AND ST_Contains(s.geom,m.geom)"
                        )
                        uri.setDataSource('', f'({query})', 'geom', '', 'id')
                    else:
                        uri.setDataSource("bged", 
                                          "manzana", 
                                          "geom", 
                                          "municipio=" + numeroMunicipio
                                          )
                    #Cargar capas

                    vlayerM = QgsVectorLayer(uri.uri(), "Manzana", "postgres")

                    QgsProject.instance().addMapLayer(vlayerM)

                    MZ_layer = QgsPalLayerSettings()
                    textFormat = QgsTextFormat()
                    textFormat.setColor(QColor('#464646')) 
                    textFormat.setSize(11) 
                    textFormat.buffer().setEnabled(True)
                    textFormat.buffer().setColor(QColor('#FFFFFF'))
                    textFormat.buffer().setSize(0.7)
                    MZ_layer.setFormat(textFormat)
                    MZ_layer.fieldName = '\'Mz \nId \' || "id"'
                    MZ_layer.isExpression = True
                    MZ_layer.enabled = True
                    MZ_layer.placement = QgsPalLayerSettings.AroundPoint
                    MZ_layer.fitInPolygonOnly = True
                    MZlabels = QgsVectorLayerSimpleLabeling(MZ_layer)
                    MZlabels.drawLabels = True
                    vlayerM.setLabeling(MZlabels)
                    vlayerM.setLabelsEnabled(True)
                    vlayerM.setCustomProperty("labeling/drawLabels",  "True")
                    vlayerM.triggerRepaint()
                    QtTest.QTest.qWait(200)

                    mySymbol1 = QgsFillSymbol.createSimple(
                        {
                            'color':'#289E26', 
                            'color_border':'#237E21', 
                            'width_border':'0.2', 
                            'style':'dense6'
                            }
                        )
                    myRenderer = vlayerM.renderer()
                    myRenderer.setSymbol(mySymbol1)
                    vlayerM.triggerRepaint()
                    QtTest.QTest.qWait(1500)

                    #Muestra el 60% de avance
                    prog.setValue(60) 

                    #Si el checkbox está marcado se cargan sólo las capas filtradas 
                    if self.dockwidget.checkFiltroCapas.isChecked():
                        query = (
                            f"SELECT v.geom as geom, v.id as id, v.nombre as nombre" 
                            f" FROM bged.vialidad as v, bged.seccion as s" 
                            f" WHERE s.seccion = {numeroSeccion} AND ST_Intersects(v.geom,s.geom)"
                        )
                        uri.setDataSource('', f'({query})', 'geom', '', 'id')
                    else:
                        uri.setDataSource("bged", "vialidad", "geom")
                    vlayerV = QgsVectorLayer(uri.uri(), "Vialidad", "postgres")
                    QgsProject.instance().addMapLayer(vlayerV)

                    V_layer = QgsPalLayerSettings()
                    textFormat = QgsTextFormat()
                    textFormat.setColor(QColor('#22243B')) 
                    textFormat.setSize(11) 
                    textFormat.buffer().setEnabled(True)
                    textFormat.buffer().setColor(QColor('#FFFFFF'))
                    textFormat.buffer().setSize(0.7)
                    V_layer.setFormat(textFormat)
                    V_layer.fieldName = '\'Id \'||"id" || \' \' || title("nombre")'
                    V_layer.isExpression = True
                    V_layer.enabled = True
                    V_layer.placement = QgsPalLayerSettings.Curved
                    Vlabels = QgsVectorLayerSimpleLabeling(V_layer)
                    Vlabels.drawLabels = True
                    vlayerV.setLabeling(Vlabels)
                    vlayerV.setLabelsEnabled(True)
                    vlayerV.setCustomProperty("labeling/drawLabels",  "True")
                    vlayerV.triggerRepaint()
                    QtTest.QTest.qWait(500)

                    renderer = vlayerV.renderer()
                    symbol1 = QgsLineSymbol.createSimple({'color': '#000000','width':'.3'})
                    renderer.setSymbol(symbol1) 
                    vlayerV.triggerRepaint()
                    QtTest.QTest.qWait(3000)

                    #Muestra el 80% de avance
                    prog.setValue(80)

                    #Si el checkbox está marcado se cargan sólo las capas filtradas 
                    if self.dockwidget.checkFiltroCapas.isChecked():
                        query = (
                            f"SELECT ne.geom as geom, ne.id as id, ne.manzana as manzana, "
                            f"ne.vialidad as vialidad, ne.numext as numext" 
                            f" FROM bged.numeros_exteriores as ne, bged.seccion as s " 
                            f"WHERE s.seccion = {numeroSeccion} AND ST_Contains(s.geom,ne.geom)"
                            )
                        uri.setDataSource('', f'({query})', 'geom', '', 'id')
                    else:
                        uri.setDataSource("bged", "numeros_exteriores", "geom")

                    #Consulta de numeros exteriores con campos nulos
                    vlayerNE = QgsVectorLayer(uri.uri(), "NumerosExteriores", "postgres")
                    QgsProject.instance().addMapLayer(vlayerNE)
                    QtTest.QTest.qWait(100)

                    NE_layer = QgsPalLayerSettings()
                    NE_layer.fieldName = 'id'
                    NE_layer.enabled = True
                    NE_layer.placement = QgsPalLayerSettings.Free
                    NElabels = QgsVectorLayerSimpleLabeling(NE_layer)
                    NElabels.drawLabels = True
                    vlayerNE.setLabeling(NElabels)
                    vlayerNE.setLabelsEnabled(True)
                    vlayerNE.setCustomProperty("labeling/drawLabels",  "True")
                    vlayerNE.triggerRepaint()
                    QtTest.QTest.qWait(200)

                    renderer = vlayerNE.renderer()
                    symbol1 = QgsLineSymbol.createSimple(
                        {
                            'color':'#005F00', 
                            'width':'0.4', 
                            'line_style':'dash'
                            }
                        )
                    renderer.setSymbol(symbol1) 
                    vlayerNE.triggerRepaint()
                    QtTest.QTest.qWait(3000)
                    
                    self.ultimoMunicipio = municipioActual

                #Borrar campos de texto en edicion simple
                self.dockwidget.textEdit.setText("")
                self.dockwidget.idManzana.setText("")
                self.dockwidget.idManzana_original.setText("")
                self.dockwidget.idVialidad_original.setText("")  
                
                #Iguala a cero el control de Crear Cadena al cargar una nueva área de trabajo
                self.controlCrearCadena = 0

                #Se ajusta el valor de progreso de 100% para mostrar el fin del proceso
                prog.setValue(100) 
                self.dockwidget.checkFiltroCapas.setChecked(False)
                QMessageBox.information(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    (
                       f"Se cargaron las capas en el área de trabajo. "
                       f"Continúe con la edición de los números exteriores." 
                        )
                    )
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )   
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al cargar las capas. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                f'{datetime.now().strftime(self.timeformat)} Error al cargar las capas: {error}'
                )
            prog.setValue(100) 
            return None
    
    def btnRecomendaciones_accion(self):
        
        try:
            QMessageBox.information(
                self.iface.mainWindow(), 
                "Aviso", 
                (
                    f"Para visualizar adecuadamente este Plugin en su pantalla se recomienda utilzar"
                    f" cualquiera de las siguientes resoluciones de pantalla:\n \n-1920 x 1080 \n"
                    f"-2048 x 1152 \n-2560 x 1600.\n\nAdemás, para completar la configuración,"
                    f" por favor, seleccione el 100% para 'Escala y Diseño' en la configuración."
                    )
                )
        
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al mostrar las recomendaciones. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al mostrar las recomendaciones: {error}'
                    )
                 )
        
    def btnMostrar_accion(self):
        
        try:
            if self.conectado == 1:
                
                self.controlMostrar = 1
                self.campo01 = ""

                #limpiar datos en combo idVialidad e idManzana
                self.dockwidget.idVialidad.clear()
                self.dockwidget.idManzana.setText("")
                
                # Get list of vector layers
                layers = list(QgsProject.instance().mapLayers().values())
                # Check if there is at least one vector layer.
                # Selecting within the same layer is fine.
                vlayer_count = 0
                for layer in layers:
                    if layer.type() == QgsMapLayer.VectorLayer:
                        vlayer_count = vlayer_count + 1

                if vlayer_count > 0:
                
                    #Obtener Datos, modificar para activar el layer de numero exteriores, 
                    # Importante!!! se evita error de seleccion de tramo
                    vl = iface.activeLayer()
                    capaactiva = vl.name()

                    if capaactiva != "NumerosExteriores":
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Alerta", 
                            (
                                f"No ha seleccionado la capa NumerosExteriores. "
                                f"Imposible mostrar. \nLa capa seleccionada actual es {capaactiva}. "
                                )
                            )
                        return

                    # get the list of selected ids 
                    ids = vl.selectedFeatureIds()
                    
                    #Si se selecciona solo un registro se muestra la información del registro
                    if len(ids) == 1:
                        # create the request with the selected ids
                        request = QgsFeatureRequest()
                        request.setFilterFids(ids)

                        fields = ['id']

                        features = vl.getFeatures(request)
                        for feature in features:
                            attrs = [feature[field] for field in fields]
                        
                        self.campo01 = str(attrs[0])
                        usr = self.dockwidget.txtUsuario.text()
                        pwd = self.dockwidget.txtClave.text()
                        
                        #localhost
                        #remote Samge bged 
                        conn = psycopg2.connect(
                            database=self.baseDatos, 
                            user=usr, 
                            password=pwd, 
                            host=self.servidor, 
                            port="5432"
                            )
                        
                        with conn:

                            qry_c = "SELECT manzana, vialidad, numext from bged.numeros_exteriores where id = %s;"
                            data_c = (self.campo01, )
                            with conn.cursor() as curs:

                                curs.execute(qry_c, data_c)
                                results = curs.fetchone()

                                idManzana = results[0]   
                                idVialidad = results[1]   
                                numExt = results[2]   

                                self.dockwidget.textEdit.setText(numExt)
                                self.dockwidget.idManzana_original.setText(str(idManzana))
                                self.dockwidget.idVialidad_original.setText(str(idVialidad))
                            
                        conn.close()
                        self.cadena_existente = numExt
                        
                    elif len(ids) == 0: 
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            (
                                f"No ha seleccionado ninguna geometría de números exteriores. "
                                f"Imposible mostrar."
                                )
                            
                            )	
                    else:
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            (
                                f"Debe seleccionar solo un registro. Hay {len(ids)} "
                                f"registros seleccionados."
                                )
                            )	
                else:
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Verifique",
                        "No hay capas vectoriales agregadas."
                        )		
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )  
            
            #Cambia a cero el Controlador de Crear Cadena
            self.controlCrearCadena = 0
        
        #Si ocurriera un error durante la ejecución se alerta al usuario para evitar que el 
        # Plugin arroje errores de Python.
        except Exception as error:
            self.controlMostrar = 0
            conn.close()
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al mostrar la información del registro seleccionado. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al mostrar la información del registro seleccionado: {error}'
                    )
                )

    def btnSugerir_accion(self):
        try:
            self.campo01 = ""
            if self.conectadoflag == 1:
                layers = list(QgsProject.instance().mapLayers().values())

                vlayer_count = 0
                for layer in layers:
                    if layer.type() == QgsMapLayer.VectorLayer:
                        vlayer_count = vlayer_count + 1


                if vlayer_count > 0:
                
                    vl = iface.activeLayer()
                    capaactiva = vl.name()

                    if capaactiva != "NumerosExteriores":
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Alerta", 
                            (
                                f"Por favor seleccione la capa NumerosExteriores, "
                                f"la capa actual es {capaactiva}"
                                )
                            )
                        return

                    ids = vl.selectedFeatureIds()
        
                    if len(ids) == 1 and capaactiva == "NumerosExteriores":
                        
                        self.campo01 = ids[0]

                        usr = self.dockwidget.txtUsuario.text()
                        pwd = self.dockwidget.txtClave.text()

                        conn = psycopg2.connect(
                            database=self.baseDatos, 
                            user=usr, 
                            password=pwd, 
                            host=self.servidor, 
                            port="5432"
                            ) 
                        #Configura la barra de progreso 
                        prog = QProgressDialog(
                            'Buscando Id de Manzana. Un momento, por favor.', '', 0, 100
                            )
                        prog.setWindowModality(Qt.WindowModal)
                        prog.setCancelButton(None)
                        time.sleep(2)
                        prog.setValue(25)
                        #Se conecta a la BD para obtener el id del registro seleccionado de la 
                        # capa de números exteriores
                        with conn:

                            qry_c = "SELECT id from bged.numeros_exteriores where id = %s;"
                            data_c = (self.campo01,)
                            with conn.cursor() as curs:

                                prog.setValue(50)
                                curs.execute(qry_c, data_c)
                                results = curs.fetchone() #one row       
                                idNumExt = results[0]   #id

                        with conn:

                            #Se conecta a ala BD para obtener el id de la manzana que toca o está 
                            # a 1m del número exterior selccionado
                            qry_c = (
                                f"SELECT a.id as id_mza FROM bged.manzana as a, "
                                f"bged.numeros_exteriores as b "
                                f"WHERE a.seccion = %s AND b.id = %s "
                                f"AND ST_Intersects(ST_Buffer(a.geom,1),b.geom) = 'true';"
                                )
                            data_c = (self.dockwidget.cveSeccion.currentText(), idNumExt,)
                            with conn.cursor() as curs:

                                prog.setValue(75)
                                curs.execute(qry_c, data_c)
                                results = curs.fetchone() #one row
                                if(results is None):
                                    QMessageBox.warning(
                                        self.iface.mainWindow(), 
                                        "Aviso",
                                        (
                                            f"El segmento de número exterior está fuera de la "
                                            f"tolerancia. Ajuste el segmento al polígono de manzana," 
                                            f"o bien, revise la validez de la geometría."
                                            )
                                        )
                                else:idmzasug = results[0]   #id           id manzana sugerido

                                if (idmzasug is None or idmzasug == ''):
                                    QMessageBox.warning(
                                        self.iface.mainWindow(), 
                                        "Aviso",
                                        "No se encontró ningún id de manzana."
                                        )
                            self.dockwidget.idManzana.setText(str(idmzasug))
                            
                            prog.setValue(100)
                        #Ajusta el valor al 100% para concluir la barra de progreso
                        conn.close()
                        
                    elif len(ids) == 0: 
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            "No seleccionó ningún registro."
                            )	
                    else:
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            "Debe seleccionar solo un registro."
                            )	
                else:
                    QMessageBox.warning
                    (self.iface.mainWindow(), 
                     "Verifique",
                     "No hay capas vectoriales agregadas."
                     )		
    
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )          
        #Si ocurriera un error durante la ejecución se alerta al usuario para evitar que el Plugin 
        # arroje errores de Python.
        except Exception as error:
            prog.setValue(100)
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error durante la ejecución. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al obtener un Id de manzana sugerido: {error}'
                    )
                )
            conn.close()
            
        
    #Aumenta el tamaño del texto en el cuadro de texto de números exteriores al máximo
    def tmaxFont(self):

        try:
            f = self.dockwidget.textEdit.font()
            f.setPointSize(18)
            self.dockwidget.textEdit.setFont(f)
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al ajustar el tamaño de fuente. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al aumentar el tamaño de fuente: {error}'
                    )
                )


    #Regresa el tamaño del texto en el cuadro de texto de números exteriores al valor original
    def tmedFont(self):

        try:
            f = self.dockwidget.textEdit.font()
            f.setPointSize(14)
            self.dockwidget.textEdit.setFont(f)
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al ajustar el tamaño de fuente. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al fijar el tamaño de fuente medio: {error}'
                    )
                )

    #Disminuye el tamaño del texto en el cuadro de texto de números exteriores al mínimo
    def tminFont(self):
        
        try:
            f = self.dockwidget.textEdit.font()
            f.setPointSize(12)
            self.dockwidget.textEdit.setFont(f)
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al ajustar el tamaño de fuente. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al disminuir el tamaño de fuente: {error}'
                    )
                )

    #Invierte el orden de la cadena del texto en el cuadro de texto de números exteriores   
    def btnInvertir(self):
        
        try:    
            cadena = self.dockwidget.textEdit.toPlainText()
            invertida = ','.join((cadena.split(",")[::-1]))
            self.dockwidget.textEdit.setText(invertida)
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al invertir la cadena. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al invertir el orden de la cadena: {error}'
                    )
                )
      
    def btnGuardar(self):

        try:
            if self.conectado == 1:
                usr = self.dockwidget.txtUsuario.text()
                pwd = self.dockwidget.txtClave.text()
            
                #localhost
                conn = psycopg2.connect(
                    database=self.baseDatos, 
                    user=usr, 
                    password=pwd, 
                    host=self.servidor, 
                    port="5432"
                    )
        
                #Grabar a Postgres
                cursor = conn.cursor()
            
                qry = "UPDATE bged.numeros_exteriores set manzana = %s, vialidad = %s, numext = %s where id = %s;"
            

                Id_manzana_actual = self.dockwidget.idManzana_original.text()
                Id_vialidad_actual = self.dockwidget.idVialidad_original.text()
                numeroExterior = self.dockwidget.textEdit.toPlainText()

                #Mostrar variables de datos actuales del numero exterior
                IdNumeroManzana = self.dockwidget.idManzana.text()
                if ' : ' in self.dockwidget.idVialidad.currentText():
                    IdNumeroVialidad = str(
                        self.dockwidget.idVialidad.currentText().split(" :",1)[0]
                        )
                else:
                    IdNumeroVialidad = self.dockwidget.idVialidad.currentText()
            
                if IdNumeroManzana == "":
                    if ((Id_manzana_actual and not Id_manzana_actual.isspace()) and not 
                        Id_manzana_actual == "None"):
                        # the string is non-empty
                        QMessageBox.information(
                            self.iface.mainWindow(), 
                            "Aviso",
                            (
                                f"No se actualizó el dato de Id manzana, se conserva el actual: "
                                f"{Id_manzana_actual}"
                                )
                            )
                        IdNumeroManzana = Id_manzana_actual
                    else:
                        # the string is empty
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Aviso",
                            "Debe ingresar el dato Id manzana actualizado para guardar los cambios."
                            )
                        return
                elif IdNumeroManzana.isnumeric == False:
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        "Aviso",(
                            f"Ingrese un Id valido, caracteres especiales o letras no permitidos.\n"
                            f"No se actualizó el dato de Id manzana, se conserva el actual: "
                            f"{Id_manzana_actual}"
                            )
                        )
                if IdNumeroVialidad == "":
                    if ((Id_vialidad_actual and not Id_vialidad_actual.isspace()) and not 
                        Id_vialidad_actual == "None"):
                        # the string is non-empty
                        QMessageBox.information(
                            self.iface.mainWindow(), 
                            "Aviso",
                            (
                                f"No se actualizó el dato de Identificador de Vialidad más cercano, "
                                f"se conserva el actual: {Id_vialidad_actual}"
                                )
                            )
                        IdNumeroVialidad = Id_vialidad_actual
                    else:
                        # the string is empty
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Aviso",
                            (
                                f"Debe ingresar el dato de Identificador de Vialidad más cercano "
                                f"para guardar los cambios."
                                )
                            )
                        return
                

                if numeroExterior == "" or numeroExterior == "None":
                    # the string is empty
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "Debe ingresar el dato de Número Exterior para guardar los cambios."
                        )
                    return

                IdNumeroManzana = IdNumeroManzana.strip()
                IdNumeroVialidad = IdNumeroVialidad.strip()
                
                #Si se usa la función Cadena UH permite concatener los números exteriores 
                # existentes con los creados o los sobrescribe
                if  self.controlCadenaUH == 1 and self.cadena_existente != "":
                    buttonReply = QMessageBox.question(
                        self.iface.mainWindow(), 
                        'Atención', 
                        (
                            f"Usó la función Cadena UH ¿Desea conservar los números exteriores "
                            f"existentes? Dé clic en «Sí» para concatenarlos o en «No» para "
                            f"sobreescribirlos."
                            ),
                        QMessageBox.Yes | QMessageBox.No, 
                        QMessageBox.No)
                    #Pregunta al usuario si quiere concatenar los datos de Cadena UH a los anteriores
                    if buttonReply == QMessageBox.Yes:
                        numeroExterior = (
                            f"{self.cadena_existente},"
                            f"{numeroExterior.upper().strip().rstrip(',')}"
                            )
                else:
                    numeroExterior = numeroExterior.upper().strip().rstrip(',')

                data = (IdNumeroManzana,IdNumeroVialidad,numeroExterior,self.campo01)
            
            
                cursor.execute(qry,data) 
                conn.commit()
                cursor.close()
                conn.close()         

                #Se limpian los distintos campos al guardar
                self.dockwidget.textEdit.setText("")
                self.dockwidget.idVialidad_original.setText("")
                self.dockwidget.idManzana_original.setText("")
                self.dockwidget.idVialidad.clear()
                self.dockwidget.idManzana.clear()
                self.dockwidget.txtRinicial.setText("")
                self.dockwidget.txtRfinal.setText("")
                self.dockwidget.txtRIntervalo.setText("")
                self.dockwidget.distUsuario.setText("")
                self.dockwidget.checkLl.setChecked(False)
                self.dockwidget.checkEnne.setChecked(False)
                self.dockwidget.checkRr.setChecked(False)
                self.dockwidget.checkSinIntervalo.setChecked(False)
                self.control = 0
                self.controlCadenaUH = 0
                self.controlMostrar = 0
                self.SectorNombre = ['', '', '']
                self.SectorRInicial = ['', '', '']
                self.SectorRFinal = ['', '', '']
                self.SectorRIntervalo = ['', '', '']
                self.flagSinIntervalo = [False,False,False]
                self.Sector1 = []
                self.Sector2 = []
                self.Sector3 = []
                self.controlCrearCadena = 0

                #Confirmar
                QMessageBox.information(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "Se guardaron los cambios exitosamente."
                    )
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )  

        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al guardar los cambios. Por favor, revise el estado de red "
                    f"o su conexión \nMotivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al guardar los cambios: {error}'
                    )
                )

    def btnCrearCadena(self):
        
        try:        
            intervalos = ""
            puntoInicio = 0
            intervaloAlfa = ""
            #btnCrearCadena
            txtRInicial = self.dockwidget.txtRinicial.text()
            txtRfinal = self.dockwidget.txtRfinal.text()
            txtRIntervalo = self.dockwidget.txtRIntervalo.text()
            if ((txtRInicial.isnumeric() == True and txtRfinal.isnumeric() == True and 
                 txtRIntervalo.isnumeric())):
                for x in range(int(txtRInicial), int(txtRfinal)+1, int(txtRIntervalo)):
                    if puntoInicio == 0:
                        intervalos = intervalos + str(x)
                        puntoInicio = 1
                    else:
                        intervalos = intervalos + "," + str(x)
            #Verifica que se hayan ingresado todos los datos para gnerar la cadena
            elif (txtRInicial == '' or txtRfinal == '' or txtRIntervalo == ''):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    "No ha ingresado valor de inicio, final o rango, por favor, ingrese los tres."
                    )
            elif ('ñ' in txtRInicial or 'Ñ' in txtRInicial or 'ñ' in txtRfinal or 'Ñ' in txtRfinal):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    (
                        f"Si desea incluir la letra 'Ñ', por favor, hágalo desde la sección de "
                        f"literarles especiales."
                        )
                    )
            #Verifica que el valor ingresado como intervalo sea un número
            elif(txtRIntervalo.isnumeric() == False):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    "Ingrese un intervalo numérico."
                    )
            #Alerta sobre la necesidad de usar una letra en el primer valor del intervalo
            elif(txtRInicial.isnumeric() == False and txtRfinal.isnumeric() == True):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    (
                        f"Si desea crea una cadena de números exteriores con letras consecutivas, "
                        f"por favor, ingrese letra de inicio y fin en orden alfabético."
                        )
                    )
            #Alerta sobre la necesidad de usar una letra en el segundo valor del intervalo
            elif(txtRInicial.isnumeric() == True and txtRfinal.isnumeric() == False):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso", 
                    (
                        f"Si desea crea una cadena de números exteriores con letras consecutivas, "
                        f"por favor, ingrese letra de inicio y fin en orden alfabético."
                        )
                    )
            #Crea la cadena de números exteriores usando una letra para los casos 1A, 1B,1C...
            elif(txtRInicial.isnumeric() == False and txtRfinal.isnumeric() == False):
                #Identifica la letra que se ingresó
                letraInicio = re.findall(r'[a-zA-Z]',txtRInicial)
                letraFinal = re.findall(r'[a-zA-Z]',txtRfinal)
                #Obtiene la parte numérica del texto ingresado
                numInicio = txtRInicial.split(letraInicio[0])[0]
                numFinal = txtRfinal.split(letraFinal[0])[0]
                #Cambia a mayúscula las letras ingresadas
                posInicial = ord(letraInicio[0].upper())
                posFinal = ord(letraFinal[0].upper())
                #Si los valores ingresados son del tipo 1A - 1C, crea 1A,1B,1C
                if numInicio == numFinal and posInicial < posFinal:
                    for i in range(posInicial, posFinal + 1, 1):
                        intervaloAlfa = intervaloAlfa + (numInicio + '' + chr(i) + ',')
                #Si los valores ingresados son del tipo 2 - 1, envía alerta
                elif (numInicio > numFinal):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso", 
                        "El orden numérico es descendente, por favor, verifique e intente de nuevo."
                        )       
                elif (numInicio > numFinal):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso", 
                        "El orden numérico es descendente, por favor, verifique e intente de nuevo."
                        )    
                elif (numInicio == numFinal and posInicial >= posFinal):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso", 
                        (
                            f"Ingresó el mismo valor y una letra menor en orden alfabético para el "
                            f"fin del rango, por favor, verifique e intente de nuevo."
                            )
                        )
                #Si los valores ingresados son del tipo 1A - 2C, crea 1A, 1B, 1C,..., 1Z, 2A, 2B, 2C
                elif numInicio != numFinal and posInicial <= posFinal:
                    for i in range(int(numInicio),int(numInicio)+1,1):
                        for j in range(posInicial, 91, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                    for i in range(int(numInicio)+1,int(numFinal),1):
                        for j in range(65, 91, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                    for i in range(int(numFinal),int(numFinal)+1,1):
                        for j in range(int(65), posFinal + 1, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                #Si los valores ingresados son del tipo 1X - 2C, crea 1X, 1Y, 1Z, 2A, 2B, 2C
                elif numInicio <= numFinal and posInicial > posFinal:
                    for i in range(int(numInicio),int(numInicio)+1,1):
                        for j in range(posInicial, 91, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                    for i in range(int(numInicio)+1,int(numFinal),1):
                        for j in range(65, 91, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                    for i in range(int(numFinal),int(numFinal)+1,1):
                        for j in range(int(65), posFinal + 1, 1):
                            intervaloAlfa = intervaloAlfa + (str(i) + '' + chr(j) + ',')
                #Si los valores ingresados son iguales, es decir 1A - 1A, envía alerta
                elif (numInicio == numFinal and posInicial == posFinal):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso", 
                        "Ingresó el mismo valor, por favor, verifique e intente de nuevo."
                        )
                intervalos = intervaloAlfa.rstrip(',')
            cadena1 = self.dockwidget.textEdit.toPlainText()
            posicion = self.dockwidget.textEdit.textCursor().position()
            if cadena1 == "":
                self.dockwidget.textEdit.setText(intervalos.replace(" ",""))
            elif intervalos == "":
                self.dockwidget.textEdit.setText(cadena1)
            else:
                #La primera vez que se usa la función se crea la cadena al final
                if self.controlCrearCadena == 0:
                    self.dockwidget.textEdit.setText(cadena1 + "," + intervalos.replace(" ",""))
                #Se crea la función en la posición del cursor
                else:
                    if(cadena1[posicion-1]=="," or posicion == 0):
                        cadena1 = f"{cadena1[0:posicion]}*{cadena1[posicion:]}"
                        cadena2 = cadena1.replace("*",f"{intervalos},").replace(" ","")
                        self.dockwidget.textEdit.setText(cadena2)
                    else:
                        QMessageBox.information(
                            self.iface.mainWindow(), 
                            "Aviso",
                            f"Verifique que el cursor esté al lado derecho de la coma."
                            )            
            #Cambia cada vez que se usa el botón Crear Cadena
            self.controlCrearCadena+=1
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al crear la cadena. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al crear la cadena de números exteriores: {error}'
                    )
                )

    def btnLimpiarIntervalo(self):
        
        try:        
            #Permite limpiar los cuadros de texto y los checkboxes
            self.dockwidget.txtRinicial.setText("")
            self.dockwidget.txtRfinal.setText("")
            self.dockwidget.txtRIntervalo.setText("")
            self.dockwidget.checkLl.setChecked(False)
            self.dockwidget.checkEnne.setChecked(False)
            self.dockwidget.checkRr.setChecked(False)       
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al limpiar los campos. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al limpiar los campos: {error}'
                    )
                )
       
    def btnIdentificar20_accion(self):
        
        try:
            
            if self.conectado == 1:
                if self.controlMostrar == 1:
                    
                    vl = iface.activeLayer()
                    ids = vl.selectedFeatureIds()
                    
                    #Si se selecciona solo un registro se muestra la información del registro
                    if len(ids) == 1:
                        #limpiar datos en combo mediante consulta
                        self.dockwidget.idVialidad.clear()

                        #Abrir base
                        usr = self.dockwidget.txtUsuario.text()
                        pwd = self.dockwidget.txtClave.text()
                        
                        #localhost
                        conn = psycopg2.connect(
                            database=self.baseDatos, 
                            user=usr, 
                            password=pwd, 
                            host=self.servidor, 
                            port="5432"
                            )
                    
                        with conn:

                            qry_c = (
                                f"SELECT via.id, via.nombre, "
                                f" ROUND(ST_Distance(numext.geom,via.geom)::numeric,2) as distancia"
                                f" FROM bged.numeros_exteriores numext, bged.vialidad via "
                                f"WHERE numext.id = %s AND ST_DWithin(numext.geom,via.geom,20) "
                                f"ORDER BY distancia ASC;"
                                )
                            data_c = (self.campo01,)
                            with conn.cursor() as curs:

                                curs.execute(qry_c, data_c)              
                                rows = curs.fetchall() #one row

                                for row in rows:

                                    idname = f'{row[0]} : {row[1].title()} a {row[2]} m.'
                                    self.dockwidget.idVialidad.addItem(idname)

                        conn.close()
                    else:
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            "Debe seleccionar solo un registro."
                            )
                else:
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "No ha usado el botón «Mostrar». No hay Ids para identificar vialidades."
                        )     
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )      
        except Exception as error:
            conn.close()
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al identificar las vialidades. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al identificar las vialidades a 20 m: {error}'
                    )
                )
            
    def btnIdentificar60_accion(self):
        
        try:
            if self.conectado == 1:
                if self.controlMostrar == 1:
                    
                    vl = iface.activeLayer()
                    ids = vl.selectedFeatureIds()
                    
                    #Si se selecciona solo un registro se muestra la información del registro
                    if len(ids) == 1:
                        #limpiar datos en combo mediante consulta
                        self.dockwidget.idVialidad.clear()
                        
                        #Abrir base
                        usr = self.dockwidget.txtUsuario.text()
                        pwd = self.dockwidget.txtClave.text()
                        
                        #localhost
                        conn = psycopg2.connect(
                            database=self.baseDatos, 
                            user=usr, 
                            password=pwd, 
                            host=self.servidor, 
                            port="5432"
                            )
                    
                        with conn:

                            qry_c = (
                                f"SELECT via.id, via.nombre, "
                                f"ROUND(ST_Distance(numext.geom,via.geom)::numeric,2) as distancia "
                                f"FROM bged.numeros_exteriores numext, bged.vialidad via "
                                f"WHERE numext.id = %s AND ST_DWithin(numext.geom,via.geom,60) "
                                f"ORDER BY distancia ASC;"
                                )
                            data_c = (self.campo01, )
                            with conn.cursor() as curs:

                                curs.execute(qry_c, data_c)        
                                rows = curs.fetchall() #one row

                                for row in rows:

                                    idname = f'{row[0]} : {row[1].title()} a {row[2]} m.'
                                    self.dockwidget.idVialidad.addItem(idname)

                        conn.close()
                    else:
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            "Debe seleccionar solo un registro."
                            )
                else:
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "No ha usado el botón «Mostrar». No hay Ids para identificar vialidades."
                        )  
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )     
        except Exception as error:
            conn.close()
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al identificar las vialidades. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al identificar las vialidades a 60 m: {error}'
                    )
                )

    def btndistUsuario_accion(self):
        
        try:
            if self.conectado == 1:
                if self.controlMostrar == 1:
                    
                    vl = iface.activeLayer()
                    ids = vl.selectedFeatureIds()
                    
                    #Si se selecciona solo un registro se muestra la información del registro
                    if len(ids) == 1:
                        #Abrir base
                        usr = self.dockwidget.txtUsuario.text()
                        pwd = self.dockwidget.txtClave.text()
                        distUsuario = self.dockwidget.distUsuario.text()

                        #localhost
                        #remote Samge bged 
                        if distUsuario == '':
                            QMessageBox.warning(
                                self.iface.mainWindow(),
                                "Alerta",
                                (
                                    f"No se ha ingresado una distancia, por favor, ingrese una. \n"
                                    f"Considere que esta debe ser mayor que 60m."
                                    )
                                )

                        elif distUsuario.isnumeric() == False:
                            QMessageBox.warning(
                                self.iface.mainWindow(),
                                "Alerta",
                                (
                                    f"Eso no es un valor, por favor, ingrese uno.\n"
                                    f"Considere que el valor de distancia debe ser mayor que 60m."
                                    )
                                )
                        
                        elif float(distUsuario) <= 60:
                            QMessageBox.warning(
                                self.iface.mainWindow(),
                                "Alerta",
                                "La distancia ingresada es igual o menor que 60m."
                                )
                        
                        elif len(distUsuario) >= 2 and float(distUsuario) > 60:

                            conn = psycopg2.connect(
                                database=self.baseDatos, 
                                user=usr, 
                                password=pwd, 
                                host=self.servidor, 
                                port="5432"
                                )

                            with conn:

                                qry_c = (
                                    f"SELECT via.id, via.nombre, "
                                    f"ROUND(ST_Distance(numext.geom,via.geom)::numeric,2) as "
                                    f"distancia FROM bged.numeros_exteriores numext, bged.vialidad "
                                    f"as via WHERE numext.id = %s AND "
                                    f"ST_DWithin(numext.geom,via.geom,%s) ORDER BY distancia ASC;"
                                    )
                                data_c = (self.campo01,distUsuario,)
                                with conn.cursor() as curs:

                                    curs.execute(qry_c, data_c)
                                    rows = curs.fetchall() #one row
                                    if len(rows) == 0:
                                        QMessageBox.warning(
                                            self.iface.mainWindow(),
                                            "Aviso",
                                            (
                                                f"La distancia no arrojó ningún resultado. "
                                                f"Por favor, intente con una mayor o verifique "
                                                f"que la cartografía esté actualizada."
                                                )
                                            )
                                    else:
                                        for row in rows:
                    
                                            idname = f'{row[0]} : {row[1].title()} a {row[2]} m.'
                                            self.dockwidget.idVialidad.addItem(idname)
                            conn.close()
                    else:
                        QMessageBox.warning(
                            self.iface.mainWindow(), 
                            "Verifique",
                            "Debe seleccionar solo un registro."
                        )
                else:
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "No ha usado el botón «Mostrar». No hay Ids para identificar vialidades."
                        )  
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No ha iniciado sesión. Imposible ejecutar la acción."
                    )      
        except Exception as error:
            conn.close()
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al identificar las vialidades. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al identificar las vialidades con la distancia ingresada: {error}'
                    )
                )

    def cveSector_changed(self):
        
        try:
            #Función para el cambio de sector en el combobox
            #Carga los datos en pantalla según lo que se tenga guardado en memoria
            self.dockwidget.txtNombreSector.setText(
                self.SectorNombre[int(self.dockwidget.cveSector.currentText())-1]
                )
            self.dockwidget.txtRinicial_2.setText(
                self.SectorRInicial[int(self.dockwidget.cveSector.currentText())-1]
                )
            self.dockwidget.txtRfinal_2.setText(
                self.SectorRFinal[int(self.dockwidget.cveSector.currentText())-1]
                )
            self.dockwidget.txtRIntervalo_2.setText(
                self.SectorRIntervalo[int(self.dockwidget.cveSector.currentText())-1]
                )
            self.dockwidget.checkSinIntervalo.setChecked(
                self.flagSinIntervalo[int(self.dockwidget.cveSector.currentText())-1]
                )

            #Carga el contenido de la cadena generada
            if (int(self.dockwidget.cveSector.currentText()) == 1):
                self.dockwidget.textEdit.setText(str(self.Sector1))
            if (int(self.dockwidget.cveSector.currentText()) == 2):
                self.dockwidget.textEdit.setText(str(self.Sector2))
            if (int(self.dockwidget.cveSector.currentText()) == 3):
                self.dockwidget.textEdit.setText(str(self.Sector3))
                
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al cambiar el campo. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al cambiar de sector: {error}'
                    )
                )
            
    def btnAsignarSector_accion(self):
        
        try:
            intervalos = ""
            puntoInicio = 0
            cveSector = self.dockwidget.cveSector.currentText()
            txtRInicial_2 = self.dockwidget.txtRinicial_2.text()
            txtRFinal_2 = self.dockwidget.txtRfinal_2.text()
            txtRIntervalo_2 = self.dockwidget.txtRIntervalo_2.text()
            sinIntervalo_checked = self.dockwidget.checkSinIntervalo.isChecked()

            #verifica que se haya asignado un sector sin intervalo sólo dos veces.
            if self.flagSinIntervalo.count(True) == 2 and self.control ==2:
                self.flagSinIntervalo[int(cveSector)-1] = False
                self.dockwidget.checkSinIntervalo.setChecked(False)
                QMessageBox.warning(
                    self.iface.mainWindow(),
                    'Aviso',
                    (
                        f'Ya se han seleccionado {self.flagSinIntervalo.count(True)} '
                        f'campos «Sin Intervalo».\nUtilice el botón «Limpiar» para este campo, '
                        f'ingrese un intervalo y comience nuevamente.'
                        )
                    )
            #Si se marca el checkbox cambia el valor de la bandera
            if sinIntervalo_checked and self.flagSinIntervalo.count(True) <= 2:
                self.control+=1
                #Agrega el valor "True" a flagSinIntervalo del sector seleccionado siempre y 
                # cuando no haya más de dos sectores seleccionados           
                self.flagSinIntervalo[int(cveSector)-1] = True
                #Se alerta que ya se han seleccionado dos sectores y no es posible seleccionar 
                # un tercero   
                QMessageBox.information(
                    self.iface.mainWindow(),
                    'Aviso',
                    (
                        f'Ya se han seleccionado {self.flagSinIntervalo.count(True)} campos '
                        f'«Sin Intervalo», no podrá seleccionar más de 2.\nSi desea insertar una '
                        f'cadena sin intervalos puede hacerlo manualmente.'
                        )
                    )
                
            #Verifica que se haya ingresado texto en la sección "Nombre de Sector"
            #Se ingresó texto, lo guarda en la lista con SectorNombre[SectorActual-1], 
            # SectorActual-1 para empezar desde la primera posición
            if self.dockwidget.txtNombreSector.text() != "":
                self.SectorNombre[int(cveSector)-1] = self.dockwidget.txtNombreSector.text()
                #Si se ingresaron todos los datos de inicio, final e intervalo del rango se guargan
                # en la lista de cada rango, en la posición del sector actual menos uno para 
                # empezar desde la primera posición
                if (txtRInicial_2 != "" and txtRInicial_2.isnumeric() and 
                    txtRFinal_2 != "" and txtRFinal_2.isnumeric and 
                    txtRIntervalo_2 != "" and txtRIntervalo_2.isnumeric()):

                    self.SectorRInicial[int(cveSector)-1] = txtRInicial_2
                    self.SectorRFinal[int(cveSector)-1] = txtRFinal_2
                    self.SectorRIntervalo[int(cveSector)-1] = txtRIntervalo_2

                    #Se crea la cadena de numeros con los valores ingresados por el usuario
                    for x in range((int(txtRInicial_2)), int(txtRFinal_2)+1, int(txtRIntervalo_2)):
                        
                        #Si no existe cadena de números exteriores en el cuadro de texto, se crea
                        if puntoInicio == 0:
                            intervalos = intervalos + str(x)
                            puntoInicio = 1

                            #Dependiendo el sector se agrega el valor
                            if (int(cveSector) == 1):
                                self.Sector1.append(str(x))
                            if (int(cveSector) == 2):
                                self.Sector2.append(str(x))
                            if (int(cveSector) == 3):
                                self.Sector3.append(str(x))
                        
                        #Si existe una cadena de números exteriores se crea y se pega al final de 
                        # la existente según sea el sector
                        else:
                            intervalos = intervalos + "," + str(x)
                            appendString = "," + str(x)

                            if (int(cveSector) == 1):
                                self.Sector1.append(appendString)
                            if (int(cveSector) == 2):
                                self.Sector2.append(appendString)
                            if (int(cveSector) == 3):
                                self.Sector3.append(appendString)

                    #Dependiendo el sector en turno, se agregan los datos a la pantalla
                    if (int(cveSector) == 1):
                        self.dockwidget.textEdit.setText(str(self.Sector1))
                    if (int(cveSector) == 2):
                        self.dockwidget.textEdit.setText(str(self.Sector2))
                    if (int(cveSector) == 3):
                        self.dockwidget.textEdit.setText(str(self.Sector3))
                
                #Si el usuario ingresa letras en los cuadros de texto para inicio, fin e intervalo 
                # se alerta a este
                elif ((txtRInicial_2.isnumeric() == False and txtRInicial_2 != '') or 
                      (txtRFinal_2.isnumeric == False and txtRFinal_2 != '') or 
                      (txtRIntervalo_2.isnumeric() == False and txtRIntervalo_2 != '')):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "Por favor, ingrese sólo valores para inicio, final e intervalo.")
                
                #Si no se ha ingresado algún o ninún valor de inicio, fin e intervalo del rango se 
                # alerta al usuario
                elif (txtRInicial_2 == "" and txtRFinal_2 == "" and txtRIntervalo_2 == "" and 
                      (sinIntervalo_checked or self.flagSinIntervalo[int(cveSector)-1] == True)):
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        "Aviso",
                        (
                            f"Se marcó la casilla «Sin Intervalo», se ignorarán los valores de "
                            f"inicio, fin e intervalo para el campo {cveSector}."
                            )
                        )

                    if (int(cveSector) == 1):
                        self.Sector1 = ['']
                    if (int(cveSector) == 2):
                        self.Sector2 = ['']
                    if (int(cveSector) == 3):
                        self.Sector3 = ['']
        
                #Si no se han ingresado todos los datos se alerta al usuario
                elif (txtRInicial_2 == "" or txtRFinal_2 == "" or txtRIntervalo_2 == "" and 
                      (sinIntervalo_checked == False or 
                       self.flagSinIntervalo[int(cveSector)-1] == False)):
                    QMessageBox.warning(
                        self.iface.mainWindow(), 
                        "Aviso",
                        (
                            f"Por favor, ingrese todos los datos de inicio, final e intervalo del "
                            f"rango para el campo {cveSector}."
                            )
                        )
                    return
                
            #Si no se ingesó texto en el Nombre del Sector se alerta el usuario
            else:
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    f"No ha ingresado ningún nombre para el campo {cveSector}."
                    )
                return
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al asignar el campo. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al asignar el campo: {error}'
                    )
                )
    
    def btnCrearCadenaUH_accion(self): 

        try:
            intervalos = ""
            self.controlCadenaUH = 1
            
            #Verifica que se tengan datos en los tres sectores y que el checkbox no esté marcado, 
            # si se cumple, avanza
            if self.SectorNombre[0] != "" and self.SectorNombre[1] != "" and self.SectorNombre[2] != "":
                for i in range(len(self.Sector1)):
                    for j in range(len(self.Sector2)):
                        for k in range(len(self.Sector3)):
                            intervalos = (
                                f"{intervalos}{self.SectorNombre[0]} {self.Sector1[i].replace(',', '')} "
                                f"{self.SectorNombre[1]} {self.Sector2[j].replace(',', '')} "
                                f"{self.SectorNombre[2]} {self.Sector3[k].replace(',', '')},"
                                )
                    
            #Si sólo se tinen los datos del primer sector se ejecuta esta parte
            if (self.SectorNombre[0] != "" and self.SectorNombre[1] == "" and self.SectorNombre[2] == ""):
                for i in range(len(self.Sector1)):
                    intervalos = f"{intervalos}{self.SectorNombre[0]} {self.Sector1[i].replace(',', '')},"

            #Si sólo se tinen los datos del segundo sector se ejecuta esta parte
            if (self.SectorNombre[0] == "" and self.SectorNombre[1] != "" and self.SectorNombre[2] == ""):
                for j in range(len(self.Sector2)):
                    intervalos = f"{intervalos}{self.SectorNombre[1]} {self.Sector2[j].replace(',', '')},"

            #Si sólo se tinen los datos del trecer sector se ejecuta esta parte
            if (self.SectorNombre[0] == "" and self.SectorNombre[1] == "" and self.SectorNombre[2] != ""):
                for k in range(len(self.Sector3)):
                    intervalos = f"{intervalos}{self.SectorNombre[2]} {self.Sector3[k].replace(',', '')},"

            #Si sólo se tinen los datos del primer y segundo sector se ejecuta esta parte
            if (self.SectorNombre[0] != "" and self.SectorNombre[1] != "" and self.SectorNombre[2] == ""):
                for i in range(len(self.Sector1)):
                    for j in range(len(self.Sector2)):
                        intervalos = (
                            f"{intervalos}{self.SectorNombre[0]} {self.Sector1[i].replace(',', '')} "
                            f"{self.SectorNombre[1]} {self.Sector2[j].replace(',', '')},"
                            )
    
            #Si sólo se tinen los datos del primer y tercer se ejecuta esta parte
            if (self.SectorNombre[0] == "" and self.SectorNombre[1] != "" and self.SectorNombre[2] != ""):
                for j in range(len(self.Sector2)):
                    for k in range(len(self.Sector3)):
                        intervalos = (
                            f"{intervalos}{self.SectorNombre[1]} {self.Sector2[j].replace(',', '')} "
                            f"{self.SectorNombre[2]} {self.Sector3[k].replace(',', '')},"
                            )

            #Si sólo se tinen los datos del segundo y terver sector se ejecuta esta parte
            if (self.SectorNombre[0] != "" and self.SectorNombre[1] == "" and self.SectorNombre[2] != ""):
                for i in range(len(self.Sector1)):
                    for k in range(len(self.Sector3)):
                        intervalos = (
                            f"{intervalos}{self.SectorNombre[0]} {self.Sector1[i].replace(',', '')} "
                            f"{self.SectorNombre[2]} {self.Sector3[k].replace(',', '')},"
                            )

            #Si no se ha ingresado ningún dato en nigún sector, se alerta al usuario
            if (self.SectorNombre[0] == "" and self.SectorNombre[1] == "" and self.SectorNombre[2] == ""):
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    "No se ha ingresado ningún dato en ningún campo, por favor, capture al menos uno."
                    )
                                
            #Quita la coma del final de la cadena
            self.dockwidget.textEdit.setText(intervalos.rstrip(',').replace('  ',' '))
            
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (   
                    f"Ocurrió un error al crear la cadena UH. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                f'{datetime.now().strftime(self.timeformat)} Error al crear la cadena UH: {error}'
                )

    def btnEliminarSector_accion(self):
        
        try:        
            #Elimina los datos ingresados según el sector seleccionado
            if (int(self.dockwidget.cveSector.currentText()) == 1):
                self.Sector1.clear()
                self.SectorRInicial[0]=""
                self.SectorRFinal[0]=""
                self.SectorRIntervalo[0]=""
            if (int(self.dockwidget.cveSector.currentText()) == 2):
                self.Sector2.clear()
                self.SectorRInicial[1]=""
                self.SectorRFinal[1]=""
                self.SectorRIntervalo[1]=""
            if (int(self.dockwidget.cveSector.currentText()) == 3):
                self.Sector3.clear()
                self.SectorRInicial[2]=""
                self.SectorRFinal[2]=""
                self.SectorRIntervalo[2]=""  
            self.control = 0         
            self.SectorNombre[int(self.dockwidget.cveSector.currentText())-1] = ""      
            self.flagSinIntervalo[int(self.dockwidget.cveSector.currentText())-1] = False
            
            #Elimina los datos de las cajas de texto de Nombre, Inicio, Final e Intervalo
            self.dockwidget.txtNombreSector.setText("")
            self.dockwidget.txtRinicial_2.setText("")
            self.dockwidget.txtRfinal_2.setText("")
            self.dockwidget.txtRIntervalo_2.setText("")
            self.dockwidget.checkSinIntervalo.setChecked(False)  
        
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al limpiar el campo. \nMotivo: \n"
                    f"{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al eliminar los datos del campo: {error}'
                    )
                )

    def btnAgregarLiteralesEspeciales(self):
        
        try:
            checkLl = self.dockwidget.checkLl.isChecked()
            checkEnne = self.dockwidget.checkEnne.isChecked()
            checkRr = self.dockwidget.checkRr.isChecked()
            #Verifica si no se selección alguna opción, de ser cierto, alerta al usuario
            if checkLl == False and checkEnne == False and checkRr == False: 
                QMessageBox.warning(
                    self.iface.mainWindow(), 
                    "Aviso",
                    (
                        f"No se ha seleccionado ninguna literal especial, por favor, "
                        f"seleccione al menos una."
                        )
                    )

            #Si se selecciona la LL, se inserta en la cadena generada
            if checkLl:
                if 'LL' in self.dockwidget.textEdit.toPlainText():
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "Ya se ha insertado la literal especial «LL»."
                        )
                else:
                    self.dockwidget.textEdit.setText(
                        insertarLetras(self.dockwidget.textEdit.toPlainText(),'L','LL')
                        )

            #Si se selecciona la Ñ, se inserta en la cadena generada
            if checkEnne:
                if 'Ñ' in self.dockwidget.textEdit.toPlainText():
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "Ya se ha insertado la literal especial «Ñ»."
                        )
                else:
                    self.dockwidget.textEdit.setText(
                        insertarLetras(self.dockwidget.textEdit.toPlainText(),'N','Ñ')
                        )

            #Si se selecciona la R, se inserta en la cadena generada
            if checkRr:
                if 'RR' in self.dockwidget.textEdit.toPlainText():
                    QMessageBox.information(
                        self.iface.mainWindow(), 
                        "Aviso",
                        "Ya se ha insertado la literal especial «RR»."
                        )
                else:
                    self.dockwidget.textEdit.setText(
                        insertarLetras(self.dockwidget.textEdit.toPlainText(),'R','RR')
                        )
                    
        except Exception as error:
            QMessageBox.critical(
                self.iface.mainWindow(), 
                "¡Oops!",
                (
                    f"Ocurrió un error al agregar las literales especiales. \n"
                    f"Motivo: \n{error}.\n Se escribe en el registro."
                    )
                )
            self.logger.error(
                (
                    f'{datetime.now().strftime(self.timeformat)} '
                    f'Error al insertar las literales especiales: {error}'
                    )
                )

#Función que inserta las literales seleccionadas por el usuario
def insertarLetras(numExt: str,letraBuscada: str,letraInsertada: str):
    lista = numExt.split(',')
    #Inserta la letra
    for position,i in enumerate(lista):
        if letraBuscada in i:
            numero = re.findall(r'\d+',i)
            if i.count(letraBuscada) == 1: lista.insert(position + 1,f'{numero[0]}{letraInsertada}')  
    nueva_lista = ','.join(lista)
    return nueva_lista